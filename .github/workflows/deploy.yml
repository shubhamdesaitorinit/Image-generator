# .github/workflows/deploy.yaml
---
name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    env:
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_AUTH_KEY: ${{ secrets.CLOUDFLARE_AUTH_KEY }}
      CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
    
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.11'
          cache: 'npm'

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-modules-cache_${{hashFiles('**/package-lock.json') }}

      # ------------------------------------------
      # Install dependencies
      #  - If the cache is missing, run `npm ci`.
      #  - Also force a fresh `npm ci` when FORCE_DEPLOY == 'true'
      # ------------------------------------------
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Lint
        run: |
          if [ "$FORCE_DEPLOY" = "true" ]; then
            npm run lint:ci:force
          else
            npm run lint
          fi

      - name: Deploy Image Generator
        run: npm run deploy
      
  post_deploy:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Post deploy URL
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_TOKEN }}
          script: |
            const deployUrl = '${{ needs.deploy.outputs.app_deploy_url }}'
            let commentBody = `ðŸš€ branch deployed successfully! ðŸŽ‰\n\n`
            if(deployUrl) {
              commentBody += `App deploy URL: ${deployUrl}`
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            })
